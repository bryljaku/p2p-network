syntax = "proto3";

enum TcpCode {
    CONNERROR = 0;              	// TODO: nie używać tego w przesyłaniu czegokolwiek, bo serializacja się sypie (tylko do użycia wewnątrz klienta/serwera
    UNKNOWN_ERROR = 1;
    OK = 2;

    CS_SEEDLIST_REQUEST = 3;		// ask server for a list of users with a specified file
    CS_SEEDLIST_RESPONSE = 4;
    CS_CLIENT_UNAVAILABLE = 5;      // signal to tracker, that another client no longer owns a file
    CS_IM_A_SEED = 6;             	// report to tracker that a you have a complete file downloaded
    CS_NEW_REQUEST = 11;
    CS_NEW_RESPONSE = 12;


    CC_LIST_REQUEST = 7;			// ask a client for list of his completed file fragments
    CC_LIST_RESPONSE = 8;
    CC_FRAGMENT_REQUEST = 9;		// request another client to send the selected fragment
    CC_FRAGMENT_RESPONSE = 10;
}

enum FileCode {
    F_ERROR = 0;                     // TODO: też lepiej tego F_ERROR nie uzywac, dla bezpieczenstwa
    F_DENY = 1;
    F_NO_FILE = 2;
    F_FRAG_MISSING = 3;
    F_FRAG_COMPLETE = 4;
}

message TorrentMessage {
    uint64 hashed = 1;
    uint32 size = 2;
    string fileName = 3;
}

message TcpMessage {
    TcpCode code = 1;
    oneof contents {
        SeedlistRequest seedlistRequest = 3;
        SeedlistResponse seedlistResponse = 4;
        ClientUnavailable clientUnavailable = 5;
        ImASeed imASeed = 6;
        NewRequest newRequest = 11;
        NewResponse newResponse = 12;


        ListRequest listRequest = 7;
        ListResponse listReponse = 8;
        FragmentRequest fragmentRequest = 9;
        FragmentResponse fragmentResponse = 10;
    }
}

message SeedlistRequest {
    uint64 hashedTorrent = 1;
}

message SeedlistResponse {
	uint64 hashedTorrent = 1;
    repeated string ipV4Seeds = 2;
    repeated string ipV4Peers = 3;
    repeated string ipV6Seeds = 4;
    repeated string ipV6Peers = 5;
}

message ClientUnavailable {				// wysylane co jakis czas do trackerow, jak zbierzemy liste niedostepnych
    repeated string ipV4Addresses = 1;
    repeated string ipV6Addresses = 2;
}

message ImASeed {			// powiadamiamy trackera, ze mamy juz caly plik pobrany
    uint64 hashedTorrent = 1;
}

message ListRequest {		// pytamy o posiadane fragmenty
    uint64 hashedTorrent = 1;
}

message ListResponse {		// odsylamy listę posiadanych frag.
	uint64 hashedTorrent = 1;
    FileCode fileCode = 2;
    repeated uint32 fragments = 3;
}

message FragmentRequest {	// wysylamy zapytanie o jeden fragment
    uint64 hashedTorrent = 1;
    uint32 fragNum = 2;
}

message FragmentResponse {	// odpowiadamy jednym fragmentem
	uint64 hashedTorrent = 1;
    uint32 fragNum = 2;
    FileCode fileCode = 3;
    bytes fragment = 4;	// tutaj bajty fragmentu
}

message NewRequest {		// chcemy dodac nowy torrent
    TorrentMessage torrentMsg = 1;
}

message NewResponse {		// wygenerowany nowy hash torrenta
	FileCode fileCode = 1;
    uint64 newHash = 2;
}